1| 3 Projet : Système d'Alarme
2| ~~~~~~~~~~~~~~~~~~~~~~~~~~~
3| 
4| Dans ce projet, nous utilisons un capteur de mouvement PIR et un buzzer pour constituer un système d'alarme, qui peut être contrôlé par la carte de développement ESP32.
5| 
6| Comment ça marche ? Les signaux électriques sont détectés et lus par le capteur de mouvement PIR via une programmation sur Arduino IDE, puis il détermine s'il y a une personne. S'il y en a une, le buzzer se déclenche. De cette manière, ce système d'alarme coûte beaucoup moins cher pour les familles et les bureaux.
7| 
8| --------------
9| 
10| 
11| 
12| 3.1 Diagramme de flux
13| ^^^^^^^^^^^^^^^^^^^^^
14| 
15| .. image:: ./scratch_img/image-20230606102303743.png
16|    :alt: image-20230606102303743
17| 
18| --------------
19| 
20| 
21| 
22| 3.2 Capteur de mouvement PIR
23| ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
24| 
25| **Description :**
26| 
27| Un capteur de mouvement PIR détecte la présence d'une personne en captant la chaleur dégagée par le corps humain.
28| 
29| De plus, ce capteur est petit et facile à utiliser.
30| 
31| .. image:: ./scratch_img/cou32.png
32|    :alt: img
33| 
34| --------------
35| 
36| **Schéma électrique :**
37| 
38| .. image:: ./scratch_img/couy31.png
39|    :alt: img
40| 
41| **Paramètres :**
42| 
43| -  Tension : 3~5V
44| -  Courant : 3,6mA
45| -  Puissance : 18mW
46| -  Angle de vue : Y = 90°, X = 110° (valeur théorique)
47| -  Distance de détection : ≤5m
48| 
49| --------------
50| 
51| **Schéma de câblage :**
52| 
53| **Connectez le capteur de mouvement PIR à io23.**
54| 
55| **Attention : Connectez le jaune à S (Signal), le rouge à V (Alimentation), et le noir à GND. Ne les inversez pas !**
56| 
57| .. image:: ./scratch_img/couj31.png
58|    :alt: img
59| 
60| --------------
61| 
62| **Code de test :**
63| 
64| Lisez la valeur à la broche IO23 pour déterminer s'il y a un mouvement humain.
65| 
66| .. image:: ./scratch_img/image-20250423083305405.png
67|    :alt: image-20250423083305405
68| 
69| **Résultat du test :**
70| 
71| Ouvrez le moniteur série.
72| 
73| Quand quelqu'un est dans la zone, **Quelqu'un** est affiché sur le moniteur, et la LED rouge sur le capteur s'éteint. Cependant, s'il n'y a personne, **Personne** sera affiché et la LED restera toujours allumée.
74| 
75| **ATTENTION** : Le capteur de mouvement PIR n'est pas capable de pénétrer les objets, donc ne couvrez pas le capteur lors de la détection de mouvements.
76| 
77| .. image:: ./scratch_img/st57.png
78|    :alt: img
79| 
80| --------------
81| 
82| 
83| 
84| 3.3 Buzzer
85| ^^^^^^^^^^^
86| 
87| **Description :**
88| 
89| Un buzzer est un avertisseur électronique qui émet des sons avec différentes fréquences et durées et est alimenté par une tension continue. Il peut donc être utilisé comme rappel ou alarme dans de nombreux dispositifs électroniques, tels que ordinateurs, imprimantes, photocopieurs, alarmes, jouets électroniques, électroniques automobiles, téléphones et minuteries.
90| 
91| .. image:: ./scratch_img/cou3png
92|    :alt: img
93| 
94| --------------
95| 
96| Un buzzer se compose d'un **dispositif de vibration** et d'un **dispositif de résonance**. Il existe deux catégories : Buzzers passifs et buzzers actifs.
97| 
98| -  Un **Buzzer passif** ne peut pas ``vibrer`` pour émettre du son par lui-même, sauf si on lui applique un ``signal carré`` d'une certaine fréquence. De plus, le son émis varie selon la fréquence du signal carré, donc un buzzer passif peut simuler des mélodies.
99| 
100|    -  Un signal carré analogique peut être généré en changeant le niveau d'alimentation aux broches. Par exemple, après un niveau haut de 500 ms, il passe à un niveau bas pendant 500 ms, puis à nouveau au niveau haut...
101|    -  \**Nous pilotons le buzzer via un signal carré entre 200~5000Hz, et nous pouvons calculer la fréquence(f) : *f=1/T* ; T est la période (le temps total de niveau haut et bas). \**
102| 
103| .. image:: ./scratch_img/cou35.png
104|    :alt: img
105| 
106| -  Un **Buzzer actif** est capable d'émettre du son automatiquement sans stimulateur externe, car il inclut un circuit de commande qui ne nécessite qu'une ``alimentation DC``. Cependant, son son est plat avec une fréquence relativement fixe.
107| 
108| --------------
109| 
110| **Dans cette expérience, un buzzer passif est appliqué pour "jouer de la musique".**
111| 
112| --------------
113| 
114| **Schéma électrique :**
115| 
116| .. image:: ./scratch_img/cou38.png
117|    :alt: img
118| 
119| **Paramètres :**
120| 
121| -  Tension : 3~5V
122| -  Courant : ≤5mA
123| -  Puissance : ≤25mW
124| 
125| --------------
126| 
127| **Schéma de câblage :**
128| 
129| **Connectez le buzzer à io16.**
130| 
131| **Attention : Connectez le jaune à S (Signal), le rouge à V (Alimentation), et le noir à GND. Ne les inversez pas !**
132| 
133| .. image:: ./scratch_img/couj32.png
134|    :alt: img
135| 
136| --------------
137| 
138| **Code de test :**
139| 
140| **Méthode 1 : Signal carré analogique**
141| 
142| Un buzzer passif est piloté par des signaux carrés, donc nous simulons l'onde.
143| 
144| Un signal carré analogique peut être généré en changeant le niveau d'alimentation de la broche : niveau haut pendant 500us et niveau bas pendant 500us. Ainsi, le buzzer émettra un son. Aussi, les durées peuvent ajuster le volume du son.
145| 
146| Essayez 1000us, 1500us, 3000us… Quelle est la différence ?
147| 
148| .. image:: ./scratch_img/cou36.png
149|    :alt: img
150| 
151| Code :
152| 
153| .. image:: ./scratch_img/st58.png
154|    :alt: img
155| 
156| -  Dans la fonction delay, l'unité de temps est la microseconde. Donc le bloc suivant représente un délai de 500ms.
157| 
158| .. image:: ./scratch_img/st59.png
159|    :alt: img
160| 
161| Selon la formule :
162| 
163| .. math:: f = 1/T
164| 
165| Ainsi, 500us est la durée, et nous pouvons calculer la fréquence = 2kHz, c'est-à-dire que le niveau haut et bas alternent 2000 fois par seconde.
166| 
167| --------------
168| 
169| **Méthode 2 : Blocs Speaker**
170| 
171| Nous adoptons les blocs code Speaker\ |image24| pour piloter la vibration du buzzer.
172| 
173| **Les blocs Speaker génèrent un signal PWM avec une certaine fréquence pour piloter la vibration du buzzer,** et la durée et le ton sont contrôlés par les paramètres correspondants.
174| 
175| Il existe deux façons de définir la durée. L'une consiste à ajuster les paramètres de la fonction tone() pour définir une durée, et l'autre à utiliser la fonction noTone() pour arrêter directement le son. Si vous ne définissez pas de durée dans tone(), le signal sonore sera toujours généré sauf si un noTone() l'arrête.
176| 
177| Pour la carte ESP32, un seul son peut être produit à la fois. Si une broche de l'ESP32 génère un signal sonore via tone(), il n'est pas possible d'émettre un son sur une autre broche avec cette fonction.
178| 
179| **Table de tons**
180| 
181| .. image:: ./scratch_img/cou37.png
182|    :alt: img
183| 
184| Code :
185| 
186| -  Faites glisser un bloc "**Tone**" depuis |image25| comme indiqué ci-dessous, et réglez la broche sur IO16.
187| 
188|    .. image:: ./scratch_img/st61.png
189|       :alt: img
190| 
191| -  Vous pouvez sélectionner une fréquence à volonté.
192| 
193|    .. image:: ./scratch_img/st62.png
194|       :alt: img
195| 
196| -  Pas de ton : Il est utilisé pour désactiver tous les tons.
197| 
198|    .. image:: ./scratch_img/st65.png
199|       :alt: img
200| 
201| Code complet :
202| 
203| .. image:: ./scratch_img/st63.png
204|    :alt: img
205| 
206| **Résultat du test :**
207| 
208| Méthode 1 : Le buzzer émet un son en continu.
209| 
210| Méthode 2 : Le buzzer s'active via la fonction tone().
211| 
212| --------------
213| 
214| **Extension : Jouer de la musique**
215| 
216| Jouez de la musique via tone().
217| 
218| Code complet :
219| 
220| .. image:: ./scratch_img/st6png
221|    :alt: img
222| 
223| --------------
224| 
225| 
226| 
227| 3.4 Système d'alarme
228| ^^^^^^^^^^^^^^^^^^^^
229| 
230| Dans cette expérience, nous allons construire un système d'alarme avec un capteur de mouvement PIR, un buzzer et une LED. Lorsque le capteur détecte un mouvement, le buzzer émet un son et la LED clignote pour signaler une intrusion.
231| 
232| --------------
233| 
234| **Schéma de câblage :**
235| 
236| **Connectez le capteur PIR à io23, le buzzer à io16, et la LED à io27.**
237| 
238| **Attention : Connectez le jaune à S (Signal), le rouge à V (Alimentation), et le noir à GND. Ne les inversez pas !**
239| 
240| .. image:: ./scratch_img/couj33.png
241|    :alt: img
242| 
243| --------------
244| 
245| **Code de test :**
246| 
247| Flux du code :
248| 
249| .. image:: ./scratch_img/flo3.png
250|    :alt: img
251| 
252| Code complet :
253| 
254| .. image:: ./scratch_img/image-20250423084431295.png
255|    :alt: img
256| 
257| **Résultat du test :**
258| 
259| Téléchargez le code et le système d'alarme commence à fonctionner. Lorsqu'il détecte un mouvement, le buzzer se déclenche et la LED clignote.
260| 
261| --------------
262| 
263| 
264| 
265| 3.5 FAQ
266| ^^^^^^^^
267| 
268| **Q : Les tons du buzzer ne sont pas précis par rapport aux véritables tons.**
269| 
270| R : Ce buzzer standard ne fait que simuler les tons, donc il ne peut pas répondre aux exigences professionnelles. Si vous voulez des tons standards, un haut-parleur plus spécialisé est nécessaire.
271| 
272| --------------
273| 
274| **Q : Le capteur de mouvement PIR donne de faux résultats.**
275| 
276| R : Ce capteur PIR n'est pas non plus un modèle professionnel.
277| 
278| Veuillez garantir les situations suivantes pour éviter les fausses informations :
279| 
280| -  Évitez les objets soufflés par le vent dans la zone de détection, tels que les rideaux, vêtements et fleurs.
281| -  Évitez une forte lumière dans la zone de détection, comme la lumière du soleil, les phares de voiture, les projecteurs et autres sources lumineuses.
282| -  Etc...
283| 
284| --------------
285| 
286| 
287| 